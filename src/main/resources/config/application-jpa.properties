##############################整合jpa(java 持久层api)配置文件####################
###配置开启控制台打印sql语句，默认不开启
#spring.jpa.show-sql=true
##数据库平台,不需要手动配置，会自动探测识别出来
#spring.jpa.database-platform=
###数据库的类型，可以根据数据库连接驱动自动识别出来，不需要自己写
#spring.jpa.database=h2

#####是否允许在启动时自动执行ddl语句,根据实体类自动建立对应的表，数据定义语句（建表）
#spring.jpa.generate-ddl=false

##该参数的作用是自动操作表结构。且该参数有4种选项，下面我们详细介绍一下这4种的区别。
#
#create: 当我们启动SpringBoot项目时，会自动为我们创建与实体类对应的表，不管表中是否有数据。也就是如果指定参数为create时，当项目启动后，该表的数据一定为空。因为该参数的处理方式，是先将表删除后，然后在创建新的表。
#create-drop: 当我们启动项目时也会我们自动创建表，但当我们的项目运行停止后，它会自动为我们删除表，并且该参数为create一样在启动时也会先把表删除后，然后在创建。
#update: 每当我们启动项目时，如果表不存在，则会根据实体类自动帮我们创建一张表。如果表存在，则会根据实体类的变化来决定是不是需要更新表，并且不管更不更新表都不会清空原数据。
#validate: 当我们启动项目时会验证实体类中的属性与数据库中的字段是否匹配，如不匹配则报错。
#spring.jpa.hibernate.ddl-auto=update


###我们这边使用自定义配置数据源，先手动关闭数据源的自动配置
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
####配置primary   Jpa数据源的相关配置
spring.jpa.primary.database=mysql
spring.jpa.primary.generate-ddl=false
spring.jpa.primary.show-sql=true

#####配置second  Jpa数据源的相关配置
spring.jpa.second.database=mysql
spring.jpa.second.generate-ddl=false
spring.jpa.second.show-sql=true