###########################数据源配置文件######################
#######h2也是一个数据源，所以配置时，也需要跟配置普通的数据源一样配置驱动。地址密码和用户名
####驱动类也可以不用写，可以自动根据连接的url来自动识别
#spring.datasource.driver-class-name=org.h2.Driver
#指定数据源的类型，一般不用指定，因为springboot可以通过连接驱动推断出来
#spring.datasource.type=org.h2.jdbcx.JdbcDataSource
##配置h2数据库连接地址，通过在这边配置连接地址，可以实现配置h2是完全基于内存的还是使用文件形式来保存数据(重启后数据不会丢失)，
# 基于内存        jdbc:h2:mem:数据库名               基于文件:   jdbc:h2:file:数据库文件位置      位置可以使用相对位置和绝对位置，也可使用~来表示家目录
#spring.datasource.url=jdbc:h2:file:./data-source/h2/test_db;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.username=root
#spring.datasource.password=root
#####连接的数据库的名字，如果使用内嵌的数据库（h2等），将会默认使用testdb作为数据库名
#spring.datasource.name=h2DataSource
####服务启动时，自动执行的一些DDL(数据定义语句，建表语句)语句,这里配置执行这些语句所使用的用户名和密码
#spring.datasource.schema=classpath:dbscript/h2-schema.sql
#spring.datasource.schema-username=root
#spring.datasource.schema-password=root
###配置在服务启动时，自动执行的一些DML语句（数据操纵语句Data Manipulation Language，增删改），执行一些sql脚本，这边可以指定多个sql脚本
#spring.datasource.data=classpath:dbscript/h2-data.sql
#执行前面的DML语句时使用的账号
#spring.datasource.data-username=root
#执行前面的DML语句时使用的密码
#spring.datasource.data-password=root
#配置服务在加载数据源时，出现错误，是否要忽视错误继续执行
#spring.datasource.continue-on-error=false
#配置这个，用于配置是否在创建数据源时，随机生成数据源的名称（唯一标识一个数据源）,默认为false，所以当使用多个上下文对象（启动多个服务）时，都会用单独一个数据源，
# 因为他们会在使用数据源的时候先判断是否存在数据源，如果存在就不创建，否则就创建数据源。
#这边配置为true,则会为每一个上下文对象创建一个独一无二的数据源名称，实现每一个上下文对象都是用独自的数据源
#spring.datasource.generate-unique-name=false



###sql语句编码格式
spring.datasource.sql-script-encoding=utf-8

#######################################################多数据源配置（在这里配置多个不同的数据源）#################################################
###基础数据源
spring.datasource.primary.url= jdbc:mysql://49.234.215.112:3306/user?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
spring.datasource.primary.initialization-mode=always
spring.datasource.primary.username=skty
spring.datasource.primary.password=shiyonglong2
spring.datasource.primary.data=classpath:dbscript/db1/h2-data.sql
spring.datasource.primary.data-username=${spring.datasource.primary.username}
spring.datasource.primary.data-password=${spring.datasource.primary.password}
spring.datasource.primary.schema=classpath:dbscript/db1/h2-schema.sql
spring.datasource.primary.schema-username=${spring.datasource.primary.username}
spring.datasource.primary.schema-password=${spring.datasource.primary.password}


####第二个数据源（如果直接写两个数据源，则h2不会自动创建出两个数据库来，只会创建一个，所以在新创建空数据源时，一个一个的创建）
spring.datasource.second.url=jdbc:mysql://49.234.215.112:3306/book?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
spring.datasource.second.username=skty
spring.datasource.second.initialization-mode=always
spring.datasource.second.password=shiyonglong2
spring.datasource.second.data=classpath:dbscript/db2/h2-data.sql
spring.datasource.second.data-username=${spring.datasource.second.username}
spring.datasource.second.data-password=${spring.datasource.second.password}
spring.datasource.second.schema=classpath:dbscript/db2/h2-schema.sql
spring.datasource.second.schema-username=${spring.datasource.second.username}
spring.datasource.second.schema-password=${spring.datasource.second.password}