<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.1.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example.skty</groupId>
    <artifactId>springboot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>springboot</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>

        <!--引入web开发相关的依赖，mvc-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <!--引入thymeleaf-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!--引入springboot开发工具，使用这个时，会设置自动禁止浏览器缓存，使我们的代码修改后，直接可以刷新到浏览器，并且支持热部署-->
        <!--使用这个依赖可以默认禁用模板引擎的缓存机制，模板修改后就会立即刷新，适合开发调试。各种资源的HTTP 头部会加上禁用缓存的标识，告诉浏览器不用缓存-->
        <!--在完全打包部署时，会自动将这个依赖禁用，当使用一般方式启动时，会加载进去-->
        <!--这边会有热部署支持，工具会监视我们的所有classPath下的文件，修改后将反馈，进行重启（这个重启操作是默认开启的，可以在配置文件中关闭，也可以自己配置排除某些文件在修改后不触发重启，如静态资源）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>compile</scope><!--这边的范围使用runTime，在运行时加载，最好不要用默认的compile，避免在编码的时候用到里面的内置方法-->
            <optional>true</optional>
        </dependency>


        <!--spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了,使用这个可以实现一些配置的读取功能，如从spring的xml中读取配置-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

<!--引入数据库相关的依赖，通过引入jpa依赖，可以实现，同时将一些数据库的连接依赖进行引入（如jdbc，事务aop等）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!--引入h2内存数据库，这个数据库基于内存，但是我们可以像连接普通数据库一样使用它，但是基于内存，使用数据库之前也要引入一些数据库连接相关的依赖，前面的jpa里面有-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!--测试相关的依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>




<!--配置远程仓库，配置为阿里的，这样下载会比较快-->
    <repositories>
        <repository>
        <id>maven - ali</id>
        <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        <releases>
            <enabled>true</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
            <checksumPolicy>fail</checksumPolicy>
        </snapshots>
        </repository>
    </repositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludeDevtools>false</excludeDevtools><!--手动配置在打包时，将spring-dev-tools进行去除（为true可以不写，默认会关闭这个，但是有时候在生产环境还要用里面的功能时就必须设置为false），也可以设置为false，因为里面有些工具(远程重启功能)可以在生产环境中用到，-->
                </configuration>
            </plugin>


            <!--配置打包程序时将所有springboot配置文件打包进去,这样会将所有的配置文件放到类路径下-->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <encoding>utf-8</encoding>
                    <useDefaultDelimiters>true</useDefaultDelimiters>
                    <resources>
                        <resource>
                            <directory>src/main/resources/</directory>
                            <filtering>true</filtering>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
